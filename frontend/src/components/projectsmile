import React, { useState } from 'react';
import { BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { BookOpen, Users, TrendingUp, DollarSign, Video, Globe, Award, Clock } from 'lucide-react';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('overview');

  // Course data from images
  const educationCourses = [
    { name: '1st and 2nd Grade Educational Videos', students: 854, videos: 7, level: 'Beginner', category: 'Education' },
    { name: 'PreSchool Learning Videos', students: 1625, videos: 13, level: 'Beginner', category: 'Education' },
    { name: 'Kindergarten Learning Videos', students: 1856, videos: 29, level: 'Beginner', category: 'Education' },
    { name: 'Learn Social Skills for Children', students: 1733, videos: 12, level: 'Intermediate', category: 'Education' },
    { name: 'Counting Videos for Kids', students: 1586, videos: 13, level: 'Intermediate', category: 'Education' },
    { name: 'Life of Shapes', students: 1895, videos: 31, level: 'Intermediate', category: 'Education' },
    { name: 'Shapes and Colors for Children Playlist', students: 1229, videos: 22, level: 'Beginner', category: 'Education' }
  ];

  const languageCourses = [
    { name: 'Learn English for Hindi Speakers', students: 0, lessons: 50, level: 'Beginner to Advanced', category: 'Language' },
    { name: 'Learn English for Urdu Speakers', students: 0, lessons: 38, level: 'All Levels', category: 'Language' },
    { name: 'Learn English for Chinese Speakers', students: 0, lessons: 22, level: 'Beginner', category: 'Language' },
    { name: 'Learn English for Spanish Speakers', students: 0, lessons: 42, level: 'Intermediate', category: 'Language' },
    { name: 'Learn English for French Speakers', students: 0, lessons: 15, level: 'Beginner to Intermediate', category: 'Language' }
  ];

  const trainingCourses = [
    { name: 'Freelance Video Editing', students: 1658, weeks: 6, category: 'Training' },
    { name: 'Advanced Graphic Design', students: 1896, weeks: 8, category: 'Training' },
    { name: 'Social Media Management', students: 1895, weeks: 5, category: 'Training' },
    { name: 'Virtual Assistant Skills', students: 2045, weeks: 4, category: 'Training' },
    { name: 'Simple Website Building', students: 2004, weeks: 4, category: 'Training' },
    { name: 'Content Writing', students: 2104, weeks: 6, category: 'Training' },
    { name: 'Basic SEO Skills', students: 1657, weeks: 3, category: 'Training' },
    { name: 'Data Entry Jobs', students: 2458, weeks: 2, category: 'Training' },
    { name: 'E-commerce Store Setup', students: 1986, weeks: 5, category: 'Training' },
    { name: 'Basic Coding', students: 2004, weeks: 8, category: 'Training' },
    { name: 'Tour Guide Services', students: 2304, weeks: 3, category: 'Training' },
    { name: 'Catering or Baking Business', students: 2040, weeks: 6, category: 'Training' },
    { name: 'Motorbike Delivery Services', students: 1684, weeks: 2, category: 'Training' },
    { name: 'Organic Vegetable Gardening', students: 1854, weeks: 10, category: 'Training' },
    { name: 'Poultry Farming Basics', students: 1854, weeks: 8, category: 'Training' },
    { name: 'Starting a Small Plant Nursery', students: 1956, weeks: 12, category: 'Training' },
    { name: 'Fish Farming', students: 2105, weeks: 10, category: 'Training' },
    { name: 'T-shirt Design & Selling', students: 1956, weeks: 4, category: 'Training' },
    { name: 'How to Start a YouTube Channel', students: 2105, weeks: 7, category: 'Training' },
    { name: 'Affiliate Marketing Basics', students: 2004, weeks: 5, category: 'Training' },
    { name: 'Voice-Over Work', students: 1555, weeks: 6, category: 'Training' }
  ];

  const allCourses = [...educationCourses, ...languageCourses, ...trainingCourses];
  const totalStudents = allCourses.reduce((sum, course) => sum + course.students, 0);
  const totalCourses = allCourses.length;
  const totalVideos = educationCourses.reduce((sum, course) => sum + (course.videos || 0), 0);

  // Analytics data
  const categoryData = [
    { name: 'Education', value: educationCourses.reduce((sum, c) => sum + c.students, 0), courses: educationCourses.length },
    { name: 'Language', value: languageCourses.reduce((sum, c) => sum + c.students, 0), courses: languageCourses.length },
    { name: 'Training', value: trainingCourses.reduce((sum, c) => sum + c.students, 0), courses: trainingCourses.length }
  ];

  const monthlyGrowth = [
    { month: 'Jan', students: 15000, courses: 25 },
    { month: 'Feb', students: 18500, courses: 28 },
    { month: 'Mar', students: 22000, courses: 30 },
    { month: 'Apr', students: 28000, courses: 33 },
    { month: 'May', students: 35000, courses: 38 },
    { month: 'Jun', students: 42619, courses: 43 }
  ];

  const topCourses = [...allCourses].sort((a, b) => b.students - a.students).slice(0, 10);

  const COLORS = ['#3b82f6', '#f59e0b', '#10b981', '#ef4444', '#8b5cf6'];

  const StatCard = ({ icon: Icon, title, value, subtitle, color }) => (
    <div className="bg-white rounded-lg shadow-md p-6 border-l-4" style={{ borderLeftColor: color }}>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-gray-500 text-sm font-medium">{title}</p>
          <h3 className="text-3xl font-bold mt-2" style={{ color }}>{value}</h3>
          {subtitle && <p className="text-gray-400 text-xs mt-1">{subtitle}</p>}
        </div>
        <div className="p-3 rounded-full" style={{ backgroundColor: `${color}20` }}>
          <Icon size={32} color={color} />
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-xl">PS</span>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Project Smile</h1>
                <p className="text-sm text-gray-500">Admin Dashboard</p>
              </div>
            </div>
            <button className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition">
              Donate
            </button>
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-6">
          <nav className="flex gap-8">
            {['overview', 'courses', 'analytics'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-4 px-2 border-b-2 font-medium transition ${
                  activeTab === tab
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab.charAt(0).toUpperCase() + tab.slice(1)}
              </button>
            ))}
          </nav>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8">
        {activeTab === 'overview' && (
          <div className="space-y-8">
            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <StatCard
                icon={Users}
                title="Total Students"
                value={totalStudents.toLocaleString()}
                subtitle="Active learners"
                color="#3b82f6"
              />
              <StatCard
                icon={BookOpen}
                title="Total Courses"
                value={totalCourses}
                subtitle="Across all categories"
                color="#f59e0b"
              />
              <StatCard
                icon={Video}
                title="Video Content"
                value={totalVideos}
                subtitle="Educational videos"
                color="#10b981"
              />
              <StatCard
                icon={Globe}
                title="Languages"
                value="5"
                subtitle="Language courses"
                color="#8b5cf6"
              />
            </div>

            {/* Charts Row */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Category Distribution */}
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">Students by Category</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                    <Pie
                      data={categoryData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {categoryData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
                <div className="mt-4 space-y-2">
                  {categoryData.map((cat, idx) => (
                    <div key={cat.name} className="flex items-center justify-between text-sm">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded" style={{ backgroundColor: COLORS[idx] }}></div>
                        <span className="text-gray-700">{cat.name}</span>
                      </div>
                      <span className="font-semibold">{cat.courses} courses</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Growth Chart */}
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">Growth Trends</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={monthlyGrowth}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="students" stroke="#3b82f6" strokeWidth={2} />
                    <Line type="monotone" dataKey="courses" stroke="#f59e0b" strokeWidth={2} />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Top Courses */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">Top 10 Courses by Enrollment</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Rank</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Course Name</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Category</th>
                      <th className="text-right py-3 px-4 font-semibold text-gray-700">Students</th>
                    </tr>
                  </thead>
                  <tbody>
                    {topCourses.map((course, idx) => (
                      <tr key={idx} className="border-b hover:bg-gray-50">
                        <td className="py-3 px-4">
                          <span className="w-8 h-8 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center font-bold text-sm">
                            {idx + 1}
                          </span>
                        </td>
                        <td className="py-3 px-4 font-medium text-gray-900">{course.name}</td>
                        <td className="py-3 px-4">
                          <span className="px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700">
                            {course.category}
                          </span>
                        </td>
                        <td className="py-3 px-4 text-right font-semibold text-gray-900">
                          {course.students.toLocaleString()}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'courses' && (
          <div className="space-y-6">
            {/* Education Courses */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <div className="flex items-center gap-2 mb-4">
                <BookOpen className="text-blue-600" size={24} />
                <h3 className="text-xl font-bold text-gray-900">Education Courses</h3>
                <span className="ml-auto text-sm text-gray-500">{educationCourses.length} courses</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {educationCourses.map((course, idx) => (
                  <div key={idx} className="border rounded-lg p-4 hover:shadow-md transition">
                    <h4 className="font-semibold text-gray-900 mb-2">{course.name}</h4>
                    <div className="space-y-1 text-sm text-gray-600">
                      <p className="flex items-center gap-2">
                        <Users size={16} /> {course.students.toLocaleString()} students
                      </p>
                      <p className="flex items-center gap-2">
                        <Video size={16} /> {course.videos} videos
                      </p>
                      <p className="flex items-center gap-2">
                        <Award size={16} /> {course.level}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Language Courses */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <div className="flex items-center gap-2 mb-4">
                <Globe className="text-orange-600" size={24} />
                <h3 className="text-xl font-bold text-gray-900">Language Courses</h3>
                <span className="ml-auto text-sm text-gray-500">{languageCourses.length} courses</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {languageCourses.map((course, idx) => (
                  <div key={idx} className="border rounded-lg p-4 hover:shadow-md transition">
                    <h4 className="font-semibold text-gray-900 mb-2">{course.name}</h4>
                    <div className="space-y-1 text-sm text-gray-600">
                      <p className="flex items-center gap-2">
                        <BookOpen size={16} /> {course.lessons} lessons
                      </p>
                      <p className="flex items-center gap-2">
                        <Award size={16} /> {course.level}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Training Courses */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <div className="flex items-center gap-2 mb-4">
                <TrendingUp className="text-green-600" size={24} />
                <h3 className="text-xl font-bold text-gray-900">Training Courses</h3>
                <span className="ml-auto text-sm text-gray-500">{trainingCourses.length} courses</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {trainingCourses.map((course, idx) => (
                  <div key={idx} className="border rounded-lg p-4 hover:shadow-md transition">
                    <h4 className="font-semibold text-gray-900 mb-2">{course.name}</h4>
                    <div className="space-y-1 text-sm text-gray-600">
                      <p className="flex items-center gap-2">
                        <Users size={16} /> {course.students.toLocaleString()} students
                      </p>
                      <p className="flex items-center gap-2">
                        <Clock size={16} /> {course.weeks} weeks
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'analytics' && (
          <div className="space-y-6">
            {/* Detailed Analytics */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">Course Enrollment Distribution</h3>
                <ResponsiveContainer width="100%" height={400}>
                  <BarChart data={topCourses.slice(0, 8)}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" angle={-45} textAnchor="end" height={150} interval={0} fontSize={10} />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="students" fill="#3b82f6" />
                  </BarChart>
                </ResponsiveContainer>
              </div>

              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">Category Performance</h3>
                <div className="space-y-4">
                  {categoryData.map((cat, idx) => (
                    <div key={cat.name}>
                      <div className="flex justify-between mb-2">
                        <span className="font-medium text-gray-700">{cat.name}</span>
                        <span className="font-semibold text-gray-900">{cat.value.toLocaleString()} students</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-3">
                        <div
                          className="h-3 rounded-full transition-all"
                          style={{
                            width: `${(cat.value / totalStudents) * 100}%`,
                            backgroundColor: COLORS[idx]
                          }}
                        ></div>
                      </div>
                      <p className="text-sm text-gray-500 mt-1">{cat.courses} courses • {((cat.value / totalStudents) * 100).toFixed(1)}% of total</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Books Section */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">Free E-Books</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="border rounded-lg p-4">
                  <h4 className="font-bold text-lg mb-2">WE!: finding community connection in a divided world</h4>
                  <p className="text-sm text-gray-600 mb-3">
                    We by Joe highlights humanity's deep disconnection despite global connectivity. Rising loneliness,
                    burnout, and mental illness stem from separation from self, others, and the Divine.
                  </p>
                  <p className="text-sm text-gray-500">0 Downloads</p>
                </div>
                <div className="border rounded-lg p-4">
                  <h4 className="font-bold text-lg mb-2">HEALING ADDICTION: A Journey to Reclaim Your Inner Child</h4>
                  <p className="text-sm text-gray-600 mb-3">
                    This book is not just words - it is a mirror. A mirror to see your hidden pain, buried memories, and
                    the little child inside you who is still waiting to be seen, loved, and healed.
                  </p>
                  <p className="text-sm text-gray-500">1524 Downloads</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;